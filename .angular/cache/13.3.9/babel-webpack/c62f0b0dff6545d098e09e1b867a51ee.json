{"ast":null,"code":"import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { Component, Input, HostBinding, EventEmitter, ChangeDetectionStrategy, ContentChildren, Output, HostListener, NgModule } from '@angular/core';\nimport { Subject, fromEvent } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"*\"];\n\nfunction MdbCarouselComponent_div_1_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function MdbCarouselComponent_div_1_button_1_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const i_r5 = restoredCtx.index;\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return ctx_r6.to(i_r5);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const i_r5 = ctx.index;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"active\", i_r5 === ctx_r3.activeSlide);\n    i0.ɵɵattribute(\"aria-current\", i_r5 === ctx_r3.activeSlide);\n  }\n}\n\nfunction MdbCarouselComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtemplate(1, MdbCarouselComponent_div_1_button_1_Template, 1, 3, \"button\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.items);\n  }\n}\n\nfunction MdbCarouselComponent_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function MdbCarouselComponent_button_4_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.prev();\n    });\n    i0.ɵɵelement(1, \"span\", 9);\n    i0.ɵɵelementStart(2, \"span\", 10);\n    i0.ɵɵtext(3, \"Previous\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction MdbCarouselComponent_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function MdbCarouselComponent_button_5_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.next();\n    });\n    i0.ɵɵelement(1, \"span\", 12);\n    i0.ɵɵelementStart(2, \"span\", 10);\n    i0.ɵɵtext(3, \"Next\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nlet MdbCarouselItemComponent = /*#__PURE__*/(() => {\n  class MdbCarouselItemComponent {\n    constructor(_elementRef) {\n      this._elementRef = _elementRef;\n      this.interval = null;\n      this.carouselItem = true;\n      this.active = false;\n      this.next = false;\n      this.prev = false;\n      this.start = false;\n      this.end = false;\n    }\n\n    get host() {\n      return this._elementRef.nativeElement;\n    }\n\n  }\n\n  MdbCarouselItemComponent.ɵfac = function MdbCarouselItemComponent_Factory(t) {\n    return new (t || MdbCarouselItemComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  MdbCarouselItemComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MdbCarouselItemComponent,\n    selectors: [[\"mdb-carousel-item\"]],\n    hostVars: 12,\n    hostBindings: function MdbCarouselItemComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"carousel-item\", ctx.carouselItem)(\"active\", ctx.active)(\"carousel-item-next\", ctx.next)(\"carousel-item-prev\", ctx.prev)(\"carousel-item-start\", ctx.start)(\"carousel-item-end\", ctx.end);\n      }\n    },\n    inputs: {\n      interval: \"interval\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MdbCarouselItemComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return MdbCarouselItemComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar Direction = /*#__PURE__*/(() => {\n  (function (Direction) {\n    Direction[Direction[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    Direction[Direction[\"NEXT\"] = 1] = \"NEXT\";\n    Direction[Direction[\"PREV\"] = 2] = \"PREV\";\n  })(Direction || (Direction = {}));\n\n  return Direction;\n})();\nlet MdbCarouselComponent = /*#__PURE__*/(() => {\n  class MdbCarouselComponent {\n    constructor(_elementRef, _cdRef) {\n      this._elementRef = _elementRef;\n      this._cdRef = _cdRef;\n      this.animation = 'slide';\n      this._controls = false;\n      this._dark = false;\n      this._indicators = false;\n      this._ride = true;\n      this._interval = 5000;\n      this.keyboard = true;\n      this.pause = true;\n      this.wrap = true;\n      this.slide = new EventEmitter();\n      this.slideChange = new EventEmitter();\n      this._activeSlide = 0;\n      this._isPlaying = false;\n      this._isSliding = false;\n      this._destroy$ = new Subject();\n    }\n\n    get items() {\n      return this._items && this._items.toArray();\n    }\n\n    get controls() {\n      return this._controls;\n    }\n\n    set controls(value) {\n      this._controls = coerceBooleanProperty(value);\n    }\n\n    get dark() {\n      return this._dark;\n    }\n\n    set dark(value) {\n      this._dark = coerceBooleanProperty(value);\n    }\n\n    get indicators() {\n      return this._indicators;\n    }\n\n    set indicators(value) {\n      this._indicators = coerceBooleanProperty(value);\n    }\n\n    get ride() {\n      return this._ride;\n    }\n\n    set ride(value) {\n      this._ride = coerceBooleanProperty(value);\n    }\n\n    get interval() {\n      return this._interval;\n    }\n\n    set interval(value) {\n      this._interval = value;\n\n      if (this.items) {\n        this._restartInterval();\n      }\n    }\n\n    get activeSlide() {\n      return this._activeSlide;\n    }\n\n    set activeSlide(index) {\n      if (this.items.length && this._activeSlide !== index) {\n        this._activeSlide = index;\n\n        this._restartInterval();\n      }\n    }\n\n    onMouseEnter() {\n      if (this.pause && this._isPlaying) {\n        this.stop();\n      }\n    }\n\n    onMouseLeave() {\n      if (this.pause && !this._isPlaying) {\n        this.play();\n      }\n    }\n\n    ngAfterViewInit() {\n      Promise.resolve().then(() => {\n        this._setActiveSlide(this._activeSlide);\n\n        if (this.interval > 0 && this.ride) {\n          this.play();\n        }\n\n        this._cdRef.markForCheck();\n      });\n\n      if (this.keyboard) {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(takeUntil(this._destroy$)).subscribe(event => {\n          if (event.key === 'ArrowRight') {\n            this.next();\n          } else if (event.key === 'ArrowLeft') {\n            this.prev();\n          }\n        });\n      }\n    }\n\n    ngOnDestroy() {\n      this._destroy$.next();\n\n      this._destroy$.complete();\n    }\n\n    _setActiveSlide(index) {\n      const currentSlide = this.items[this._activeSlide];\n      currentSlide.active = false;\n      const newSlide = this.items[index];\n      newSlide.active = true;\n      this._activeSlide = index;\n    }\n\n    _restartInterval() {\n      this._resetInterval();\n\n      const activeElement = this.items[this.activeSlide];\n      const interval = activeElement.interval ? activeElement.interval : this.interval;\n\n      if (!isNaN(interval) && interval > 0) {\n        this._lastInterval = setInterval(() => {\n          const nInterval = +interval;\n\n          if (this._isPlaying && !isNaN(nInterval) && nInterval > 0) {\n            this.next();\n          } else {\n            this.stop();\n          }\n        }, interval);\n      }\n    }\n\n    _resetInterval() {\n      if (this._lastInterval) {\n        clearInterval(this._lastInterval);\n        this._lastInterval = null;\n      }\n    }\n\n    play() {\n      if (!this._isPlaying) {\n        this._isPlaying = true;\n\n        this._restartInterval();\n      }\n    }\n\n    stop() {\n      if (this._isPlaying) {\n        this._isPlaying = false;\n\n        this._resetInterval();\n      }\n    }\n\n    to(index) {\n      if (index > this.items.length - 1 || index < 0) {\n        return;\n      }\n\n      if (this.activeSlide === index) {\n        this.stop();\n        this.play();\n        return;\n      }\n\n      const direction = index > this.activeSlide ? Direction.NEXT : Direction.PREV;\n\n      this._animateSlides(direction, this.activeSlide, index);\n\n      this.activeSlide = index;\n    }\n\n    next() {\n      if (!this._isSliding) {\n        this._slide(Direction.NEXT);\n      }\n    }\n\n    prev() {\n      if (!this._isSliding) {\n        this._slide(Direction.PREV);\n      }\n    }\n\n    _slide(direction) {\n      const isFirst = this._activeSlide === 0;\n      const isLast = this._activeSlide === this.items.length - 1;\n\n      if (!this.wrap) {\n        if (direction === Direction.NEXT && isLast || direction === Direction.PREV && isFirst) {\n          return;\n        }\n      }\n\n      const newSlideIndex = this._getNewSlideIndex(direction);\n\n      this._animateSlides(direction, this.activeSlide, newSlideIndex);\n\n      this.activeSlide = newSlideIndex;\n      this.slide.emit();\n    }\n\n    _animateSlides(direction, currentIndex, nextIndex) {\n      const currentItem = this.items[currentIndex];\n      const nextItem = this.items[nextIndex];\n      const currentEl = currentItem.host;\n      const nextEl = nextItem.host;\n      this._isSliding = true;\n\n      if (this._isPlaying) {\n        this.stop();\n      }\n\n      if (direction === Direction.NEXT) {\n        nextItem.next = true;\n        setTimeout(() => {\n          this._reflow(nextEl);\n\n          currentItem.start = true;\n          nextItem.start = true;\n\n          this._cdRef.markForCheck();\n        }, 0);\n        const transitionDuration = 600;\n        fromEvent(currentEl, 'transitionend').pipe(take(1)).subscribe(() => {\n          nextItem.next = false;\n          nextItem.start = false;\n          nextItem.active = true;\n          currentItem.active = false;\n          currentItem.start = false;\n          currentItem.next = false;\n          this.slideChange.emit();\n          this._isSliding = false;\n        });\n\n        this._emulateTransitionEnd(currentEl, transitionDuration);\n      } else if (direction === Direction.PREV) {\n        nextItem.prev = true;\n        setTimeout(() => {\n          this._reflow(nextEl);\n\n          currentItem.end = true;\n          nextItem.end = true;\n\n          this._cdRef.markForCheck();\n        }, 0);\n        const transitionDuration = 600;\n        fromEvent(currentEl, 'transitionend').pipe(take(1)).subscribe(() => {\n          nextItem.prev = false;\n          nextItem.end = false;\n          nextItem.active = true;\n          currentItem.active = false;\n          currentItem.end = false;\n          currentItem.prev = false;\n          this.slideChange.emit();\n          this._isSliding = false;\n        });\n\n        this._emulateTransitionEnd(currentEl, transitionDuration);\n      }\n\n      if (!this._isPlaying && this.interval > 0) {\n        this.play();\n      }\n    }\n\n    _reflow(element) {\n      return element.offsetHeight;\n    }\n\n    _emulateTransitionEnd(element, duration) {\n      let eventEmitted = false;\n      const durationPadding = 5;\n      const emulatedDuration = duration + durationPadding;\n      fromEvent(element, 'transitionend').pipe(take(1)).subscribe(() => {\n        eventEmitted = true;\n      });\n      setTimeout(() => {\n        if (!eventEmitted) {\n          element.dispatchEvent(new Event('transitionend'));\n        }\n      }, emulatedDuration);\n    }\n\n    _getNewSlideIndex(direction) {\n      let newSlideIndex;\n\n      if (direction === Direction.NEXT) {\n        newSlideIndex = this._getNextSlideIndex();\n      }\n\n      if (direction === Direction.PREV) {\n        newSlideIndex = this._getPrevSlideIndex();\n      }\n\n      return newSlideIndex;\n    }\n\n    _getNextSlideIndex() {\n      const isLast = this._activeSlide === this.items.length - 1;\n\n      if (!isLast) {\n        return this._activeSlide + 1;\n      } else if (this.wrap && isLast) {\n        return 0;\n      } else {\n        return this._activeSlide;\n      }\n    }\n\n    _getPrevSlideIndex() {\n      const isFirst = this._activeSlide === 0;\n\n      if (!isFirst) {\n        return this._activeSlide - 1;\n      } else if (this.wrap && isFirst) {\n        return this.items.length - 1;\n      } else {\n        return this._activeSlide;\n      }\n    }\n\n  }\n\n  MdbCarouselComponent.ɵfac = function MdbCarouselComponent_Factory(t) {\n    return new (t || MdbCarouselComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  MdbCarouselComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MdbCarouselComponent,\n    selectors: [[\"mdb-carousel\"]],\n    contentQueries: function MdbCarouselComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MdbCarouselItemComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._items = _t);\n      }\n    },\n    hostBindings: function MdbCarouselComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"mouseenter\", function MdbCarouselComponent_mouseenter_HostBindingHandler() {\n          return ctx.onMouseEnter();\n        })(\"mouseleave\", function MdbCarouselComponent_mouseleave_HostBindingHandler() {\n          return ctx.onMouseLeave();\n        });\n      }\n    },\n    inputs: {\n      animation: \"animation\",\n      controls: \"controls\",\n      dark: \"dark\",\n      indicators: \"indicators\",\n      ride: \"ride\",\n      interval: \"interval\",\n      keyboard: \"keyboard\",\n      pause: \"pause\",\n      wrap: \"wrap\"\n    },\n    outputs: {\n      slide: \"slide\",\n      slideChange: \"slideChange\"\n    },\n    ngContentSelectors: _c0,\n    decls: 6,\n    vars: 7,\n    consts: [[1, \"carousel\", \"slide\"], [\"class\", \"carousel-indicators\", 4, \"ngIf\"], [1, \"carousel-inner\"], [\"class\", \"carousel-control-prev\", \"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"carousel-control-next\", \"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [1, \"carousel-indicators\"], [\"type\", \"button\", 3, \"active\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 3, \"click\"], [\"type\", \"button\", 1, \"carousel-control-prev\", 3, \"click\"], [\"aria-hidden\", \"true\", 1, \"carousel-control-prev-icon\"], [1, \"visually-hidden\"], [\"type\", \"button\", 1, \"carousel-control-next\", 3, \"click\"], [\"aria-hidden\", \"true\", 1, \"carousel-control-next-icon\"]],\n    template: function MdbCarouselComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, MdbCarouselComponent_div_1_Template, 2, 1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵprojection(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, MdbCarouselComponent_button_4_Template, 4, 0, \"button\", 3);\n        i0.ɵɵtemplate(5, MdbCarouselComponent_button_5_Template, 4, 0, \"button\", 4);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"carousel-fade\", ctx.animation === \"fade\")(\"carousel-dark\", ctx.dark);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.indicators);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.controls);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.controls);\n      }\n    },\n    directives: [i1.NgIf, i1.NgForOf],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MdbCarouselComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdbCarouselModule = /*#__PURE__*/(() => {\n  class MdbCarouselModule {}\n\n  MdbCarouselModule.ɵfac = function MdbCarouselModule_Factory(t) {\n    return new (t || MdbCarouselModule)();\n  };\n\n  MdbCarouselModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MdbCarouselModule\n  });\n  MdbCarouselModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return MdbCarouselModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MdbCarouselComponent, MdbCarouselItemComponent, MdbCarouselModule }; //# sourceMappingURL=mdb-angular-ui-kit-carousel.mjs.map","map":null,"metadata":{},"sourceType":"module"}